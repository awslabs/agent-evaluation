# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0

import os
from datetime import datetime

from agenteval import jinja_env
from agenteval.test import Test

_TEMPLATE_ROOT = "summary"
_TEMPLATE_FILE_NAME = "agenteval_summary.md.jinja"
_TIMESTAMP_FORMAT = "%m/%d/%Y %H:%M:%S"


def create_markdown_summary(
    summary_dir: str,
    run_id: int,
    pass_rate: float,
    num_tests: int,
    run_start_time: datetime,
    run_end_time: datetime,
    evaluator_input_token_count: int,
    evaluator_output_token_count: int,
    tests: list[Test],
):
    """
    Create a Markdown summary of the test results.

    This function uses a Jinja2 template to render a Markdown summary of the
    provided tests and test results.

    The summary is then written to a file in the current working directory.

    Args:
        summary_dir (str): The directory to save the test summary to.
        run_id (int): The run identifier.
        pass_rate (float): The pass rate.
        num_tests (int): The total number of tests.
        run_start_time (datetime): The start time of the run.
        run_end_time (datetime): The end time of the run.
        evaluator_input_token_count (int): The number of input tokens processed by the evaluator.
        evaluator_output_token_count (int): The number of output tokens generated by the evaluator.
        tests (list[Test]): A list of tests.

    Returns:
        None
    """
    template = jinja_env.get_template(os.path.join(_TEMPLATE_ROOT, _TEMPLATE_FILE_NAME))

    os.makedirs(summary_dir, exist_ok=True)

    summary_path = os.path.join(summary_dir, os.path.splitext(_TEMPLATE_FILE_NAME)[0])

    rendered = template.render(
        tests=tests,
        run_id=run_id,
        run_start_time=run_start_time.strftime(_TIMESTAMP_FORMAT),
        run_end_time=run_end_time.strftime(_TIMESTAMP_FORMAT),
        num_tests=num_tests,
        pass_rate=pass_rate,
        evaluator_input_token_count=evaluator_input_token_count,
        evaluator_output_token_count=evaluator_output_token_count,
    )

    _write_summary(summary_path, rendered)


def _write_summary(path: str, summary: str):
    with open(path, "w+") as f:
        f.write(summary)
